import bcrypt from "bcrypt";
import { v2 as cloudinary } from "cloudinary";
import Store from "../models/Store.js";
import generateToken from "../utils/generateToken.js";
import transporter from "../utils/nodeMailer.js";

export const storeRegister = async (req, res) => {
  try {
    const {
      name,
      email,
      password,
      phone,
      role,
      address,
      division,
      district,
      upazila,
    } = req.body;

    const image = req.file;

    // Field validation
    if (
      !name ||
      !email ||
      !password ||
      !phone ||
      !role ||
      !address ||
      !division ||
      !district ||
      !upazila ||
      !image
    ) {
      return res.status(400).json({
        success: false,
        message: "рж╕ржХрж▓ рждржерзНржп ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи",
      });
    }

    const existing = await Store.findOne({ email });
    if (existing) {
      return res.status(409).json({
        success: false,
        message: "ржПржЗ ржЗржорзЗржЗрж▓ржЯрж┐ ржЗрждрзЛржоржзрзНржпрзЗ ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝рзЗржЫрзЗ",
      });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    const uploadResult = await cloudinary.uploader.upload(image.path);

    const newStore = new Store({
      name,
      email,
      password: hashedPassword,
      phone,
      role,
      address,
      division,
      district,
      upazila,
      image: uploadResult.secure_url,
      status: "pending",
    });

    await newStore.save();

    const mailOptions = {
      from: "mdrohanulhaquerohan368@gmail.com",
      to: email,
      subject: "ржЖржкржирж╛рж░ ржжрзЛржХрж╛ржи рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи рж╕ржлрж▓ рж╣ржпрж╝рзЗржЫрзЗ | ржирзНржпрж╛ржпрзНржпржорзВрж▓рзНржп ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржо",
      html: `
    <div style="font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333;">
      <h2 style="color: #008000;">ЁЯУЛ рж╕рзНржЯрзЛрж░ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи рж╕ржорзНржкржирзНржи</h2>
      
      <p>ржкрзНрж░рж┐ржпрж╝ <strong>${name}</strong>,</p>

      <p>ржЖржкржирж╛рж░ ржжрзЛржХрж╛ржирзЗрж░ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи <strong>ржирзНржпрж╛ржпрзНржпржорзВрж▓рзНржп ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯрзЗ</strong> рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕ржорзНржкржирзНржи рж╣ржпрж╝рзЗржЫрзЗред</p>

      <p>ржмрж░рзНрждржорж╛ржирзЗ ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ <strong>ржкрзНрж░рж╢рж╛рж╕ржХрзЗрж░ ржЕржирзБржорзЛржжржирзЗрж░ ржЕржкрзЗржХрзНрж╖рж╛ржпрж╝ рж░ржпрж╝рзЗржЫрзЗ</strong>ред ржЕржирзБржорзЛржжржирзЗрж░ ржкрж░ ржЖржкржирж┐ рж▓ржЧржЗржи ржХрж░рзЗ ржЖржкржирж╛рж░ рж╕рзНржЯрзЛрж░ ржкрж░рж┐ржЪрж╛рж▓ржирж╛ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред</p>

      <p style="margin-top: 20px;">ржЖржорж╛ржжрзЗрж░ рж╕ржЩрзНржЧрзЗ ржерж╛ржХрж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржжред</p>

      <p>рж╢рзБржнрзЗржЪрзНржЫрж╛ржирзНрждрзЗ,<br/>
      <strong>ржирзНржпрж╛ржпрзНржпржорзВрж▓рзНржп ржЯрж┐ржо</strong></p>

      <hr/>
      <small style="color: #777;">ржПржЗ ржЗржорзЗржЗрж▓ржЯрж┐ рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ ржкрзНрж░рзЗрж░рж┐ржд рж╣ржпрж╝рзЗржЫрзЗ, ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╕рж░рж╛рж╕рж░рж┐ ржЙрждрзНрждрж░ ржкрзНрж░ржжрж╛ржи ржХрж░ржмрзЗржи ржирж╛ред</small>
    </div>
  `,
    };

    await transporter.sendMail(mailOptions);

    return res.status(201).json({
      success: true,
      message:
        "рж╕рзНржЯрзЛрж░ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи рж╕ржлрж▓ рж╣ржпрж╝рзЗржЫрзЗред ржкрзНрж░рж╢рж╛рж╕ржХрзЗрж░ ржЕржирзБржорзЛржжржирзЗрж░ ржкрж░ рж▓ржЧржЗржи ржХрж░рж╛ ржпрж╛ржмрзЗред",
    });
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: "рж╕рзНржЯрзЛрж░ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ",
    });
  }
};

export const storeLogin = async (req, res) => {
  try {
    const { email, phone, password } = req.body;

    if (!email || !phone || !password) {
      return res.status(400).json({
        success: false,
        message: "рж╕ржХрж▓ рждржерзНржп ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи",
      });
    }

    const store = await Store.findOne({ email });

    if (!store || store.phone !== phone) {
      return res.status(401).json({
        success: false,
        message: "ржЗржорзЗржЗрж▓ ржЕржержмрж╛ ржлрзЛржи ржиржорзНржмрж░ ржнрзБрж▓ рж╣ржпрж╝рзЗржЫрзЗ",
      });
    }

    if (store.status === "pending") {
      return res.status(403).json({
        success: false,
        message: "ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржПржЦржирзЛ ржкрзНрж░рж╢рж╛рж╕ржХ ржжрзНржмрж╛рж░рж╛ ржЕржирзБржорзЛржжрж┐ржд рж╣ржпрж╝ржирж┐",
      });
    }

    if (store.status === "rejected") {
      return res.status(403).json({
        success: false,
        message: "ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ",
      });
    }

    const isPasswordMatch = await bcrypt.compare(password, store.password);

    if (!isPasswordMatch) {
      return res.status(401).json({
        success: false,
        message: "ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб рж╕ржарж┐ржХ ржиржпрж╝",
      });
    }

    return res.status(200).json({
      success: true,
      message: "рж▓ржЧржЗржи рж╕ржлрж▓ рж╣ржпрж╝рзЗржЫрзЗ",
      token: generateToken(store._id),
    });
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: "рж▓ржЧржЗржи ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ",
    });
  }
};

export const storeGetData = async (req, res) => {
  try {
    const storeId = req.id;

    console.log(storeId);

    const store = await Store.findById(storeId).select("-password -otp");

    if (!store) {
      return res.status(404).json({
        success: false,
        message: "рж╕рзНржЯрзЛрж░ ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐",
      });
    }

    return res.status(200).json({
      success: true,
      message: "рж╕рзНржЯрзЛрж░рзЗрж░ рждржерзНржп рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ",
      storeData: store,
    });
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: "рж╕рзНржЯрзЛрж░рзЗрж░ рждржерзНржп рж╕ржВржЧрзНрж░рж╣ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ",
    });
  }
};

export const getStoreById = async (req, res) => {
  const { id } = req.params;

  if (!id) {
    return res.status(400).json({
      success: false,
      message: "рж╕рзНржЯрзЛрж░рзЗрж░ ржЖржЗржбрж┐ ржкрзНрж░ржжрж╛ржи ржХрж░рж╛ рж╣ржпрж╝ржирж┐",
    });
  }

  try {
    const store = await Store.findById(id).select("-password -otp");
    if (!store) {
      return res.status(404).json({
        success: false,
        message: "рж╕рзНржЯрзЛрж░ ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐",
      });
    }
    return res.status(200).json({
      success: true,
      message: "рж╕рзНржЯрзЛрж░рзЗрж░ рждржерзНржп рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ",
      storeData: store,
    });

    return res.status(200).json({
      success: true,
      message: "рж╕рзНржЯрзЛрж░рзЗрж░ рждржерзНржп рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ",
      storeData: store,
    });
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: "рж╕рзНржЯрзЛрж░рзЗрж░ рждржерзНржп рж╕ржВржЧрзНрж░рж╣ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ",
    });
  }
};

export const getAllStoreList = async (req, res) => {
  try {
    const store = await Store.find({ status: "approved" }).select(
      "-password -otp"
    );

    if (!store) {
      return res.status(404).json({
        success: false,
        message: "рж╕ржХрж▓ рж╕рзНржЯрзЛрж░рзЗрж░ рждрж╛рж▓рж┐ржХрж╛ ржкрж╛ржУржпрж╝рж╛ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ",
      });
    }

    return res.json({
      success: true,
      message: "рж╕ржХрж▓ рж╕рзНржЯрзЛрж░рзЗрж░ рждрж╛рж▓рж┐ржХрж╛ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ",
      storeList: store,
    });
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: "рж╕ржХрж▓ рж╕рзНржЯрзЛрж░рзЗрж░ рждрж╛рж▓рж┐ржХрж╛ ржкрж╛ржУржпрж╝рж╛ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ",
    });
  }
};

export const getAllStoreReqList = async (req, res) => {
  try {
    const storeList = await Store.find();

    return res.status(200).json({
      success: true,
      message: "рж╕ржХрж▓ рж╕рзНржЯрзЛрж░рзЗрж░ рждрж╛рж▓рж┐ржХрж╛ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ",
      reqStoreList: storeList,
    });
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: "рж╕ржХрж▓ рж╕рзНржЯрзЛрж░рзЗрж░ рждрж╛рж▓рж┐ржХрж╛ ржкрж╛ржУржпрж╝рж╛ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ",
    });
  }
};

export const changeStoreStatus = async (req, res) => {
  const { storeId, status } = req.body;

  if (!storeId || !status) {
    return res.status(400).json({
      success: false,
      message: "рж╕ржХрж▓ рждржерзНржп ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи",
    });
  }

  try {
    const store = await Store.findById(storeId);

    if (!store) {
      return res.status(404).json({
        success: false,
        message: "рж╕рзНржЯрзЛрж░ ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐",
      });
    }

    store.status = status.toLowerCase();
    await store.save();

    if (["approved", "rejected"].includes(store.status)) {
      const statusText =
        store.status === "approved" ? "ржЕржирзБржорзЛржжрж┐ржд" : "ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржд";
      const actionText =
        store.status === "approved"
          ? "ржЖржкржирж┐ ржПржЦржи рж▓ржЧржЗржи ржХрж░рзЗ ржЖржкржирж╛рж░ рж╕рзНржЯрзЛрж░ ржкрж░рж┐ржЪрж╛рж▓ржирж╛ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред"
          : "ржЖржкржирж╛рж░ ржкрзНрж░ржжрждрзНржд рждржерзНржпрзЗрж░ ржнрж┐рждрзНрждрж┐рждрзЗ ржкрзНрж░рж╢рж╛рж╕ржХ рж╕рзНржЯрзЛрж░ржЯрж┐ ржЕржирзБржорзЛржжржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржиржирж┐ред ржЖржкржирж┐ ржЪрж╛ржЗрж▓рзЗ ржкрзБржирж░рж╛рзЯ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред";

      const mailOptions = {
        from: "mdrohanulhaquerohan368@gmail.com",
        to: store.email,
        subject:
          "ржЖржкржирж╛рж░ рж╕рзНржЯрзЛрж░рзЗрж░ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржкрж░рж┐ржмрж░рзНрждрж┐ржд рж╣ржпрж╝рзЗржЫрзЗ | ржирзНржпрж╛ржпрзНржпржорзВрж▓рзНржп ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржо",
        html: `
          <div style="font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333;">
            <h2 style="color: #2E8B57;">ЁЯУв рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржЖржкржбрзЗржЯ</h2>
            <p>ржкрзНрж░рж┐ржпрж╝ <strong>${store.name}</strong>,</p>
            <p>ржЖржкржирж╛рж░ рж╕рзНржЯрзЛрж░рзЗрж░ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ <strong>${statusText}</strong> ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред</p>
            <p>${actionText}</p>
            <p style="margin-top: 20px;">ржзржирзНржпржмрж╛ржжрж╛ржирзНрждрзЗ,<br>
            <strong>ржирзНржпрж╛ржпрзНржпржорзВрж▓рзНржп ржкрзНрж░рж╢рж╛рж╕ржи</strong></p>
          </div>
        `,
      };

      await transporter.sendMail(mailOptions);
    }

    return res.status(200).json({
      success: true,
      message: "рж╕рзНржЯрзЛрж░рзЗрж░ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ",
    });
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: "рж╕рзНржЯрзЛрж░рзЗрж░ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржкрж░рж┐ржмрж░рзНрждржи ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ",
    });
  }
};

export const storeEditProfile = async (req, res) => {
  const {
    name,
    email,
    phone,
    password,
    role,
    address,
    division,
    district,
    upazila,
  } = req.body;
  const image = req.file;

  try {
    const storeId = req.id;

    if (!storeId) {
      return res.status(401).json({
        success: false,
        message: "ржЕржерзЗржиржЯрж┐ржХрзЗрж╢ржи рждржерзНржп ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐",
      });
    }

    // Build updateData only with provided fields to avoid overwriting with undefined
    const updateData = {};

    if (name) updateData.name = name.trim();
    if (email) updateData.email = email.trim();
    if (phone) updateData.phone = phone.trim();
    if (role) updateData.role = role.trim();
    if (address) updateData.address = address.trim();
    if (division) updateData.division = division.trim();
    if (district) updateData.district = district.trim();
    if (upazila) updateData.upazila = upazila.trim();

    // Only hash and update password if provided and not empty string
    if (password && password.trim() !== "") {
      updateData.password = await bcrypt.hash(password.trim(), 10);
    }

    if (image) {
      // Upload to Cloudinary and save secure_url
      const uploadedImage = await cloudinary.uploader.upload(image.path);
      updateData.image = uploadedImage.secure_url;
    }

    // Update the store document and return the new version
    const updatedStore = await Store.findByIdAndUpdate(storeId, updateData, {
      new: true,
      runValidators: true,
    });

    if (!updatedStore) {
      return res.status(404).json({
        success: false,
        message: "ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐",
      });
    }

    return res.status(200).json({
      success: true,
      message: "рждржерзНржп рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ",
      data: updatedStore,
    });
  } catch (error) {
    console.error("Profile update error:", error);
    return res.status(500).json({
      success: false,
      message: "рждржерзНржп ржкрж░рж┐ржмрж░рзНрждржи ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ",
      error: error.message,
    });
  }
};

export const sendResetOtp = async (req, res) => {
  const { email } = req.body;

  if (!email) {
    return res.status(400).json({
      success: false,
      message: "ржЗржорзЗржЗрж▓ ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи",
    });
  }

  try {
    const store = await Store.findOne({ email });

    if (!store) {
      return res.status(404).json({
        success: false,
        message: "ржПржЗ ржЗржорзЗржЗрж▓ рж╕рзНржЯрзЛрж░ ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐",
      });
    }

    const otp = Math.floor(100000 + Math.random() * 900000);
    store.resetOtp = otp;
    await store.save();

    const mailOptions = {
      from: "mdrohanulhaquerohan368@gmail.com",
      to: email,
      subject: "ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб рж░рж┐рж╕рзЗржЯ OTP",
      text: `ржЖржкржирж╛рж░ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб рж░рж┐рж╕рзЗржЯрзЗрж░ OTP рж╣рж▓рзЛ: ${otp}`,
    };

    await transporter.sendMail(mailOptions);

    return res.status(200).json({
      success: true,
      message: "OTP рж╕ржлрж▓ржнрж╛ржмрзЗ ржЗржорзЗржЗрж▓рзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ",
    });
  } catch (error) {
    console.error("OTP ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ:", error);
    return res.status(500).json({
      success: false,
      message: "OTP ржкрж╛ржарж╛ржирзЛ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ",
    });
  }
};
